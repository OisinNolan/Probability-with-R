{
s <- 0
n <- 0
for (i in x){
bin <- binary(i)
print(bin);
for (n in 1:nb) {
if (bin[n] == 1) s <- s+1
else             s <- s-1
}
}
print(s)
s_obs <- abs(s) / sqrt(nb * length(x))
Pvaleur = 2 * (1 - pnorm(s_obs))
return(Pvaleur)
}
Frequency(randu(100, 123), 32)
Frequency(randu(1000, 123), 32)
Frequency <- function(x, nb)
{
s <- 0
n <- 0
for (i in x){
bin <- binary(i)
print(bin);
for (n in 2:nb) {
if (bin[n] == 1) s <- s+1
else             s <- s-1
}
}
print(s)
s_obs <- abs(s) / sqrt(nb * length(x))
Pvaleur = 2 * (1 - pnorm(s_obs))
return(Pvaleur)
}
Frequency(randu(100, 123), 32)
Frequency(randu(1000, 123), 32)
Frequency(randu(10000, 123), 32)
Frequency(randu(10000, 120), 32)
Frequency(randu(10000, 100), 32)
Frequency(randu(100, 100), 32)
Frequency(randu(100, 20), 32)
Frequency(randu(100, 21), 32)
Frequency(randu(100, 22), 32)
Frequency(randu(100, 124), 32)
Frequency(randu(100, 125), 32)
Frequency(randu(100, 123), 32)
Frequency(randu(100, 125), 32)
Frequency <- function(x, nb)
{
s <- 0
n <- 0
startAt <- 1
bin1 <- binary(x[1]);
if(bin1[32] == 1) {
startAt <- 0
}
for (i in x){
bin <- binary(i)
print(bin);
for (n in startAt:nb) {
if (bin[n] == 1) s <- s+1
else             s <- s-1
}
}
print(s)
s_obs <- abs(s) / sqrt(nb * length(x))
Pvaleur = 2 * (1 - pnorm(s_obs))
return(Pvaleur)
}
Frequency(randu(100, 123), 32)
Frequency <- function(x, nb)
{
s <- 0
n <- 0
startAt <- 2
bin1 <- binary(x[1]);
if(bin1[32] == 1) {
startAt <- 1
}
for (i in x){
bin <- binary(i)
print(bin);
for (n in startAt:nb) {
if (bin[n] == 1) s <- s+1
else             s <- s-1
}
}
print(s)
s_obs <- abs(s) / sqrt(nb * length(x))
Pvaleur = 2 * (1 - pnorm(s_obs))
return(Pvaleur)
}
Frequency(randu(100, 123), 32)
Frequency(randu(100, 125), 32)
Frequency(randu(100, 124), 32)
Frequency(randu(10000, 124), 32)
sample.int(K, 100)
K <- 0
sample.int(K, 100)
K <- c()
sample.int(K, 100)
sample.int(10000, 100)
seeds <- sample.int(10000, 100)
seeds
for (i in 1:length(seeds)) {}
for (i in 1:length(seeds)) { Frequency(randu(1000, seeds[i]), 32) }
Frequency <- function(x, nb)
{
s <- 0
n <- 0
bin1 <- binary(x[1]);
for (i in x){
bin <- binary(i)
for (n in 1:nb) {
if (bin[n] == 1) s <- s+1
else             s <- s-1
}
}
s_obs <- abs(s) / sqrt(nb * length(x))
Pvaleur = 2 * (1 - pnorm(s_obs))
print(Pvaleur)
return(Pvaleur)
}
for (i in 1:length(seeds)) { Frequency(randu(1000, seeds[i]), 32) }
Frequency <- function(x, nb)
{
s <- 0
n <- 0
bin1 <- binary(x[1]);
for (i in x){
bin <- binary(i)
for (n in 1:nb) {
if (bin[n] == 1) s <- s+1
else             s <- s-1
}
}
s_obs <- abs(s) / sqrt(nb * length(x))
Pvaleur = 2 * (1 - pnorm(s_obs))
print(Pvaleur)
return(Pvaleur)
}
for (i in 1:length(seeds)) { Frequency(randu(1000, seeds[i]), 32) }
seeds
seeds <- sample.int(10000000, 100)
seeds
for (i in 1:length(seeds)) { Frequency(randu(1000, seeds[i]), 32) }
Frequency <- function(x, nb)
{
s <- 0
n <- 0
for (i in x){
bin <- binary(i)
for (n in 2:nb) {
if (bin[n] == 1) s <- s+1
else             s <- s-1
}
}
s_obs <- abs(s) / sqrt((nb-1) * length(x))
Pvaleur = 2 * (1 - pnorm(s_obs))
print(Pvaleur)
return(Pvaleur)
}
for (i in 1:length(seeds)) { Frequency(randu(1000, seeds[i]), 32) }
Frequency <- function(x, nb)
{
s <- 0
n <- 0
for (i in x){
bin <- binary(i)
print(bin)
for (n in 2:nb) {
if (bin[n] == 1) s <- s+1
else             s <- s-1
}
}
s_obs <- abs(s) / sqrt((nb-1) * length(x))
Pvaleur = 2 * (1 - pnorm(s_obs))
print(Pvaleur)
return(Pvaleur)
}
Frequency(randu(100, 123), 32)
Frequency <- function(x, nb)
{
s <- 0
n <- 0
for (i in x){
bin <- binary(i)
print(bin)
for (n in 2:nb-1) {
if (bin[n] == 1) s <- s+1
else             s <- s-1
}
}
s_obs <- abs(s) / sqrt((nb-2) * length(x))
Pvaleur = 2 * (1 - pnorm(s_obs))
print(Pvaleur)
return(Pvaleur)
}
Frequency(randu(100, 123), 32)
Frequency(randu(100, 120), 32)
Frequency(randu(100, 1200), 32)
Frequency(StandardMinimal(100, 1200), 32)
Frequency(StandardMinimal(100, 123), 32)
Frequency(StandardMinimal(1000, 123), 32)
Frequency <- function(x, nb)
{
s <- 0
n <- 0
for (i in x){
bin <- binary(i)
print(bin)
for (n in 1:nb) {
if (bin[n] == 1) s <- s+1
else             s <- s-1
}
}
s_obs <- abs(s) / sqrt((nb) * length(x))
Pvaleur = 2 * (1 - pnorm(s_obs))
print(Pvaleur)
return(Pvaleur)
}
Frequency(StandardMinimal(1000, 123), 32)
Frequency(StandardMinimal(100, 123), 32)
Frequency(StandardMinimal(1000, 124), 32)
Frequency <- function(x, nb)
{
s <- 0
n <- 0
for (i in x){
bin <- binary(i)
print(bin)
for (n in 2:nb) {
n <- n+1
if (bin[n] == 1) s <- s+1
else             s <- s-1
}
}
s_obs <- abs(s) / sqrt(n)
Pvaleur = 2 * (1 - pnorm(s_obs))
print(Pvaleur)
return(Pvaleur)
}
Frequency(StandardMinimal(1000, 124), 32)
Frequency(StandardMinimal(1000, 124), 32)
Frequency <- function(x, nb)
{
s <- 0
n <- 0
for (i in x){
bin <- binary(i)
print(bin)
for (n in 2:nb) {
n <- n+1
if (bin[n] == 1) s <- s+1
else             s <- s-1
}
}
s_obs <- abs(s) / sqrt(n)
Pvaleur = 2 * (1 - pnorm(s_obs))
print(Pvaleur)
return(Pvaleur)
}
Frequency(StandardMinimal(1000, 124), 32)
Frequency <- function(x, nb)
{
s <- 0
totalN <- 0
for (i in x){
bin <- binary(i)
print(bin)
for (n in 2:nb) {
if (bin[n] == 1) s <- s+1
else             s <- s-1
}
}
s_obs <- abs(s) / sqrt(totalN)
Pvaleur = 2 * (1 - pnorm(s_obs))
print(Pvaleur)
return(Pvaleur)
}
Frequency(StandardMinimal(1000, 124), 32)
Frequency <- function(x, nb)
{
s <- 0
totalN <- 0
for (i in x){
bin <- binary(i)
print(bin)
for (n in 2:nb) {
if (bin[n] == 1) s <- s+1
else             s <- s-1
}
}
s_obs <- abs(s) / sqrt(totalN)
Pvaleur = 2 * (1 - pnorm(s_obs))
print(Pvaleur)
return(Pvaleur)
}
Frequency(StandardMinimal(1000, 124), 32)
Frequency <- function(x, nb)
{
s <- 0
totalN <- 0
for (i in x){
bin <- binary(i)
print(bin)
for (n in 2:nb) {
totalN <- totalN + 1
if (bin[n] == 1) s <- s+1
else             s <- s-1
}
}
s_obs <- abs(s) / sqrt(totalN)
Pvaleur = 2 * (1 - pnorm(s_obs))
print(Pvaleur)
return(Pvaleur)
}
Frequency(StandardMinimal(1000, 124), 32)
Frequency(StandardMinimal(1000, 123), 32)
Frequency(randu(1000, 123), 32)
Frequency(randu(1000, 120), 32)
for(i in 1:length(seeds)) {
Frequency(randu(1000, seeds[i]), 32)
}
Frequency <- function(x, nb)
{
s <- 0
totalN <- 0
for (i in x){
bin <- binary(i)
for (n in 2:nb) {
totalN <- totalN + 1
if (bin[n] == 1) s <- s+1
else             s <- s-1
}
}
s_obs <- abs(s) / sqrt(totalN)
Pvaleur = 2 * (1 - pnorm(s_obs))
print(Pvaleur)
return(Pvaleur)
}
for(i in 1:length(seeds)) {
Frequency(randu(1000, seeds[i]), 32)
}
for(i in 1:length(seeds)) {
Frequency(StandardMinimal(1000, seeds[i]), 32)
}
for(i in 1:length(seeds)) {
Frequency(MersenneTwister(1000, seeds[i]), 32)
}
for(i in 1:length(seeds)) {
Frequency(MersenneTwister(1000, 1, seeds[i]), 32)
}
source("generateurs.R")
library(randtoolbox)
graine <- 9274629
set.seed(graine)
Runs <- function(x, nb)
{
# pre-test
uns    <- 0
totalN <- 0
for(i in x)
{
totalN   <- totalN + nb
bin <- rev(binary(i))
for(n in 1:nb)
{
if(bin[n] == 1) uns <- uns + 1
}
}
pi  <- uns/totalN
print(pi)
tau <- 2/sqrt(totalN)
if(abs(pi - 0.5) >= tau) return(0.0)
# Vn(obs)
V <- 1
for(i in x)
{
bin <- rev(binary(i))
for(n in 1:(nb-1))
{
if(bin[n] != bin[n+1]) V <- V + 1
}
}
pi2pi <- 2*pi*(1-pi)
Pvaleur <- 2*(1 - pnorm( abs(V - totalN*pi2pi) / (sqrt(totalN)*pi2pi) ))
return(Pvaleur)
}
RANDUavgPvalue <- 0
for(i in 1:length(seeds)) {
# La plage des valeurs de randu: {0, ..., 2^31-1}
# 2^31-1 s'écrit sur 31 bits
RANDUavgPvalue <- RANDUavgPvalue + Runs(randu(1000, seeds[i]), 31)
}
RANDUavgPvalue <- RANDUavgPvalue / 100
SMavgPvalue <- 0
for(i in 1:length(seeds)) {
# La plage des valeurs de Standard Minimal: {0, ..., 2^31-2}
# 2^31-1 s'écrit sur 31 bits
SMavgPvalue <- SMavgPvalue + Runs(StandardMinimal(1000, seeds[i]), 31)
}
SMavgPvalue <- SMavgPvalue / 100
MTavgPvalue <- 0
for(i in 1:length(seeds)) {
# La plage des valeurs de Mersenne-Twister: {0, ..., 2^32-1}
# 2^32-1 s'écrit sur 32 bits
MTavgPvalue <- MTavgPvalue + Runs(MersenneTwister(1000, 1, seeds[i]), 32)
}
Runs <- function(x, nb)
{
# pre-test
uns    <- 0
totalN <- 0
for(i in x)
{
totalN   <- totalN + nb
bin <- rev(binary(i))
for(n in 1:nb)
{
if(bin[n] == 1) uns <- uns + 1
}
}
pi  <- uns/totalN
tau <- 2/sqrt(totalN)
if(abs(pi - 0.5) >= tau) return(0.0)
# Vn(obs)
V <- 1
for(i in x)
{
bin <- rev(binary(i))
for(n in 1:(nb-1))
{
if(bin[n] != bin[n+1]) V <- V + 1
}
}
print(V)
pi2pi <- 2*pi*(1-pi)
Pvaleur <- 2*(1 - pnorm( abs(V - totalN*pi2pi) / (sqrt(totalN)*pi2pi) ))
return(Pvaleur)
}
pi
Runs <- function(x, nb)
{
# pre-test
uns    <- 0
totalN <- 0
for(i in x)
{
totalN   <- totalN + nb
bin <- rev(binary(i))
for(n in 1:nb)
{
if(bin[n] == 1) uns <- uns + 1
}
}
pi  <- uns/totalN
tau <- 2/sqrt(totalN)
if(abs(pi - 0.5) >= tau) return(0.0)
# Vn(obs)
V <- 1
for(i in x)
{
bin <- rev(binary(i))
for(n in 1:(nb-1))
{
if(bin[n] != bin[n+1]) V <- V + 1
}
}
print(V)
pi2pi <- 2*pi*(1-pi)
Pvaleur <- 2*(1 - pnorm( abs(V - totalN*pi2pi) / (sqrt(totalN)*pi2pi) ))
return(Pvaleur)
}
Runs(randu(1000, 123), 31)
Runs(randu(100, 123), 31)
Runs <- function(x, nb)
{
# pre-test
uns    <- 0
totalN <- 0
for(i in x)
{
totalN   <- totalN + nb
bin <- rev(binary(i))
for(n in 1:nb)
{
if(bin[n] == 1) uns <- uns + 1
}
}
pi  <- uns/totalN
tau <- 2/sqrt(totalN)
if(abs(pi - 0.5) >= tau) return(0.0)
# Vn(obs)
V <- 1
for(i in x)
{
bin <- rev(binary(i))
for(n in 1:(nb-1))
{
if(bin[n] != bin[n+1]) V <- V + 1
}
}
print(totalN)
print(V)
pi2pi <- 2*pi*(1-pi)
Pvaleur <- 2*(1 - pnorm( abs(V - totalN*pi2pi) / (sqrt(totalN)*pi2pi) ))
return(Pvaleur)
}
Runs(randu(1000, 123), 31)
Runs(randu(100, 123), 31)
